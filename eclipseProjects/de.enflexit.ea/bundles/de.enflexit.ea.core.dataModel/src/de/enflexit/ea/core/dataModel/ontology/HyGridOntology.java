// file: HyGridOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package de.enflexit.ea.core.dataModel.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: HyGridOntology.java
 * @author ontology bean generator
 * @version 2023/07/13, 21:15:48
 */
public class HyGridOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "HyGrid";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new HyGridOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String GRIDSTATEASSESSMENTINFORMATION_VOLTAGERANGE="voltageRange";
    public static final String GRIDSTATEASSESSMENTINFORMATION_GRIDSTATEASSESSMENT="gridStateAssessment";
    public static final String GRIDSTATEASSESSMENTINFORMATION="GridStateAssessmentInformation";
    public static final String GRIDSTATEAGENTMANAGEMENT="GridStateAgentManagement";
    public static final String GRIDSTATEVIOLATION_CHOSENFLEXIBILITYIMAG="chosenFlexibilityImag";
    public static final String GRIDSTATEVIOLATION_POSSIBLEFLEXIBILITYOFFERS="possibleFlexibilityOffers";
    public static final String GRIDSTATEVIOLATION_ACTUATORNAME="actuatorName";
    public static final String GRIDSTATEVIOLATION_REQUIREDVOLTAGEADJUSTMENT="requiredVoltageAdjustment";
    public static final String GRIDSTATEVIOLATION_CABLE="cable";
    public static final String GRIDSTATEVIOLATION_REQUIREDCURRENTADJUSTMENT="requiredCurrentAdjustment";
    public static final String GRIDSTATEVIOLATION_CABLEOVERLOADINPERCENT="cableOverloadInPercent";
    public static final String GRIDSTATEVIOLATION_NPHASEOFVIOLATION="nPhaseOfViolation";
    public static final String GRIDSTATEVIOLATION_ACTUALBRANCHCURRENT="actualBranchCurrent";
    public static final String GRIDSTATEVIOLATION_ACTUALNODALVOLTAGE="actualNodalVoltage";
    public static final String GRIDSTATEVIOLATION_KINDOFVIOLATION="kindOfViolation";
    public static final String GRIDSTATEVIOLATION_CHOSENFLEXIBILITYREAL="chosenFlexibilityReal";
    public static final String GRIDSTATEVIOLATION_REQUIREDPOWERREAL="requiredPowerReal";
    public static final String GRIDSTATEVIOLATION_REQUIREDPOWERIMAG="requiredPowerImag";
    public static final String GRIDSTATEVIOLATION_COMPONENTOFVIOLATION="componentOfViolation";
    public static final String GRIDSTATEVIOLATION="GridStateViolation";
    public static final String NETWORKSTATEINFORMATION_TIMESTAMP="timeStamp";
    public static final String NETWORKSTATEINFORMATION="NetworkStateInformation";
    public static final String REMOTEAGENTREGISTRATIONREQUEST_CERTIFICATEBASE64="certificateBase64";
    public static final String REMOTEAGENTREGISTRATIONREQUEST="RemoteAgentRegistrationRequest";
    public static final String FLEXIBILITYOFFER_PRIORITY="priority";
    public static final String FLEXIBILITYOFFER_POSSIBLEPOWERIMAG="possiblePowerImag";
    public static final String FLEXIBILITYOFFER_POSSIBLEVOLTAGEADJUSTMENT="possibleVoltageAdjustment";
    public static final String FLEXIBILITYOFFER_ACTUATORNAME="actuatorName";
    public static final String FLEXIBILITYOFFER_POSSIBLECURRENTADJUSTMENT="possibleCurrentAdjustment";
    public static final String FLEXIBILITYOFFER_POSSIBLEPOWERREAL="possiblePowerReal";
    public static final String FLEXIBILITYOFFER="FlexibilityOffer";
    public static final String TESTBEDAGENTMANAGEMENT="TestbedAgentManagement";
    public static final String SHOWUIACTION="ShowUiAction";
    public static final String ELECTRICALGRIDSTATEUPDATE_TIMESTAMPGRIDSTATE="TimeStampGridState";
    public static final String ELECTRICALGRIDSTATEUPDATE_GRIDSTATE="GridState";
    public static final String ELECTRICALGRIDSTATEUPDATE="ElectricalGridStateUpdate";
    public static final String GRIDSTATECONTROL="GridStateControl";
    public static final String REQUESTVALUES="RequestValues";
    public static final String CEAREGISTRATIONRESPONSE_COUNTERPARTAID="counterpartAID";
    public static final String CEAREGISTRATIONRESPONSE="CEARegistrationResponse";
    public static final String SETMODBUSSETPOINTS_SETPOINTS="setpoints";
    public static final String SETMODBUSSETPOINTS="SetModbusSetpoints";
    public static final String ENERGYAGENTCONTROL="EnergyAgentControl";
    public static final String ELECTRICALMEASUREMENT_ELECTRICALNODESTATE="electricalNodeState";
    public static final String ELECTRICALMEASUREMENT="ElectricalMeasurement";
    public static final String WEATHERDATAUPDATE_TIMESTAMPWEATHER="TimeStampWeather";
    public static final String WEATHERDATAUPDATE_PREDICTEDWEATHERDATA="PredictedWeatherData";
    public static final String WEATHERDATAUPDATE="WeatherDataUpdate";
    public static final String MEASUREMENT="Measurement";
    public static final String GASMEASUREMENT_GASNODESTATE="gasNodeState";
    public static final String GASMEASUREMENT="GasMeasurement";
    public static final String MODBUSADAPTERACTION="ModbusAdapterAction";
    public static final String REFERENCEPVMEASUREMENTUPDATE_RELATIVEPOWER="relativePower";
    public static final String REFERENCEPVMEASUREMENTUPDATE_TIMESTAMPREFPV="TimeStampRefPV";
    public static final String REFERENCEPVMEASUREMENTUPDATE="ReferencePVMeasurementUpdate";
    public static final String VOLTAGEBANDINFORMATION_VOLTAGEBAND="voltageBand";
    public static final String VOLTAGEBANDINFORMATION="VoltageBandInformation";
    public static final String PROXYAGENTREGISTRATIONREQUEST="ProxyAgentRegistrationRequest";
    public static final String TRANSFORMERNODEPROPERTIES_RATEDVOLTAGE="ratedVoltage";
    public static final String TRANSFORMERNODEPROPERTIES="TransformerNodeProperties";
    public static final String SENSORPROPERTIES_SENSORID="sensorID";
    public static final String SENSORPROPERTIES_MEASURELOCATION="measureLocation";
    public static final String SENSORPROPERTIES="SensorProperties";
    public static final String REMOTEAGENTINFORMATION_REMOTEAGENTAID="remoteAgentAID";
    public static final String REMOTEAGENTINFORMATION_PROXYAGENTAID="proxyAgentAID";
    public static final String REMOTEAGENTINFORMATION="RemoteAgentInformation";
    public static final String UNITVALUE_UNIT="unit";
    public static final String UNITVALUE_VALUE="value";
    public static final String UNITVALUE="UnitValue";
    public static final String GASNODESTATE_VOLUMEFLOW="volumeFlow";
    public static final String GASNODESTATE="GasNodeState";
    public static final String GRIDSTATEASSESSMENT_UTILIZATIONTRAFFICLIGHT="utilizationTrafficLight";
    public static final String GRIDSTATEASSESSMENT_VOLTAGETRAFFICLIGHT="voltageTrafficLight";
    public static final String GRIDSTATEASSESSMENT="GridStateAssessment";
    public static final String LONGVALUE_STRINGLONGVALUE="stringLongValue";
    public static final String LONGVALUE="LongValue";
    public static final String TRIPHASESENSORSTATE_MEASUREDVOLTAGEL3="measuredVoltageL3";
    public static final String TRIPHASESENSORSTATE_MEASUREDVOLTAGEL2="measuredVoltageL2";
    public static final String TRIPHASESENSORSTATE_MEASUREDVOLTAGEL1="measuredVoltageL1";
    public static final String TRIPHASESENSORSTATE="TriPhaseSensorState";
    public static final String UNIPHASECABLESTATE_COSPHI="cosPhi";
    public static final String UNIPHASECABLESTATE_CURRENT="current";
    public static final String UNIPHASECABLESTATE_CURRENTREAL="currentReal";
    public static final String UNIPHASECABLESTATE_CURRENTIMAG="currentImag";
    public static final String UNIPHASECABLESTATE_P="P";
    public static final String UNIPHASECABLESTATE_LOSSESQ="lossesQ";
    public static final String UNIPHASECABLESTATE_LOSSESP="lossesP";
    public static final String UNIPHASECABLESTATE_UTILIZATION="utilization";
    public static final String UNIPHASECABLESTATE_Q="Q";
    public static final String UNIPHASECABLESTATE="UniPhaseCableState";
    public static final String TRIPHASEELECTRICALNODESTATE_L1="l1";
    public static final String TRIPHASEELECTRICALNODESTATE_L2="l2";
    public static final String TRIPHASEELECTRICALNODESTATE_L3="l3";
    public static final String TRIPHASEELECTRICALNODESTATE="TriPhaseElectricalNodeState";
    public static final String HEATNODESTATE_TEMPERATURESETPOINT="temperatureSetPoint";
    public static final String HEATNODESTATE="HeatNodeState";
    public static final String TRIPHASESLACKNODESTATE_SLACKNODESTATEL3="slackNodeStateL3";
    public static final String TRIPHASESLACKNODESTATE_SLACKNODESTATEL2="slackNodeStateL2";
    public static final String TRIPHASESLACKNODESTATE_SLACKNODESTATEL1="slackNodeStateL1";
    public static final String TRIPHASESLACKNODESTATE="TriPhaseSlackNodeState";
    public static final String FLUIDNODESTATE_PRESSURE="pressure";
    public static final String FLUIDNODESTATE_TEMPERATURE="temperature";
    public static final String FLUIDNODESTATE="FluidNodeState";
    public static final String PIPESURROUNDINGAIR="PipeSurroundingAir";
    public static final String ELECTRICALNODEPROPERTIES_ISLOADNODE="isLoadNode";
    public static final String ELECTRICALNODEPROPERTIES_NOMINALPOWER="nominalPower";
    public static final String ELECTRICALNODEPROPERTIES="ElectricalNodeProperties";
    public static final String CABLEWITHBREAKERPROPERTIES_BREAKERBEGIN="breakerBegin";
    public static final String CABLEWITHBREAKERPROPERTIES_BREAKEREND="breakerEnd";
    public static final String CABLEWITHBREAKERPROPERTIES="CableWithBreakerProperties";
    public static final String PIPESURROUNDINGEARTH_DEPTHSINMETERS="depthsInMeters";
    public static final String PIPESURROUNDINGEARTH="PipeSurroundingEarth";
    public static final String ELECTRICALNODESTATE="ElectricalNodeState";
    public static final String NODECOMPONENTPROPERTIES_DESCRIPTION="description";
    public static final String NODECOMPONENTPROPERTIES="NodeComponentProperties";
    public static final String HEATPIPESTATE_DELTATEMPERATURE="deltaTemperature";
    public static final String HEATPIPESTATE_DELTAPRESSURE="deltaPressure";
    public static final String HEATPIPESTATE_ENERGYLOSS="energyLoss";
    public static final String HEATPIPESTATE="HeatPipeState";
    public static final String UNIPHASESENSORSTATE_MEASUREDVOLTAGE="measuredVoltage";
    public static final String UNIPHASESENSORSTATE="UniPhaseSensorState";
    public static final String PIPESTATE_SURROUNDINGTEMPERATURE="surroundingTemperature";
    public static final String PIPESTATE_TEMPERATUREIN="temperatureIn";
    public static final String PIPESTATE_PRESSUREIN="pressureIn";
    public static final String PIPESTATE_VELOCITYIN="velocityIn";
    public static final String PIPESTATE_TEMPERATUREOUT="temperatureOut";
    public static final String PIPESTATE_PRESSUREOUT="pressureOut";
    public static final String PIPESTATE_VELOCITYOUT="velocityOut";
    public static final String PIPESTATE="PipeState";
    public static final String HEATNODEPROPERTIES_ISLOADNODE="isLoadNode";
    public static final String HEATNODEPROPERTIES_NOMINALPOWER="nominalPower";
    public static final String HEATNODEPROPERTIES="HeatNodeProperties";
    public static final String CABLESTATE="CableState";
    public static final String CIRCUITBREAKER_ISCLOSED="isClosed";
    public static final String CIRCUITBREAKER_ISCONTROLLABLE="isControllable";
    public static final String CIRCUITBREAKER_ATCOMPONENT="atComponent";
    public static final String CIRCUITBREAKER_BREAKERID="breakerID";
    public static final String CIRCUITBREAKER="CircuitBreaker";
    public static final String TWINPIPESTATE_RETURNPIPESTATE="returnPipeState";
    public static final String TWINPIPESTATE_SUPPLYPIPESTATE="supplyPipeState";
    public static final String TWINPIPESTATE="TwinPipeState";
    public static final String TRAFFICLIGHT="TrafficLight";
    public static final String MODBUSSETPOINT_REGISTERINDEX="registerIndex";
    public static final String MODBUSSETPOINT_SETPOINTVALUE="setpointValue";
    public static final String MODBUSSETPOINT="ModbusSetpoint";
    public static final String ELECTRICALPOWER_CURRENT="current";
    public static final String ELECTRICALPOWER_VOLTAGEABS="voltageAbs";
    public static final String ELECTRICALPOWER="ElectricalPower";
    public static final String DOUBLEVALUE_STRINGDOUBLEVALUE="stringDoubleValue";
    public static final String DOUBLEVALUE="DoubleValue";
    public static final String UNIPHASECABLEWITHBREAKER_BREAKERBEGIN="breakerBegin";
    public static final String UNIPHASECABLEWITHBREAKER_BREAKEREND="breakerEnd";
    public static final String UNIPHASECABLEWITHBREAKER="UniPhaseCableWithBreaker";
    public static final String UNIPHASEELECTRICALTRANSFORMERSTATE_RATEDVOLTAGE="ratedVoltage";
    public static final String UNIPHASEELECTRICALTRANSFORMERSTATE="UniPhaseElectricalTransformerState";
    public static final String EDGECOMPONENTSTATE="EdgeComponentState";
    public static final String GREENTRAFFICLIGHT="GreenTrafficLight";
    public static final String POWER="Power";
    public static final String REACTIVEPOWER="ReactivePower";
    public static final String NODECOMPONENTSTATE="NodeComponentState";
    public static final String UNIPHASESLACKNODESTATE_VOLTAGEREAL="voltageReal";
    public static final String UNIPHASESLACKNODESTATE_VOLTAGEIMAG="voltageImag";
    public static final String UNIPHASESLACKNODESTATE="UniPhaseSlackNodeState";
    public static final String DYNAMICCOMPONENTSTATE="DynamicComponentState";
    public static final String VOLTAGEBAND_VOLTAGEMIN="voltageMin";
    public static final String VOLTAGEBAND_VOLTAGEMAX="voltageMax";
    public static final String VOLTAGEBAND_VOLTAGEAVG="voltageAvg";
    public static final String VOLTAGEBAND="VoltageBand";
    public static final String WEATHERDATA_PREDICTEDHOUR="PredictedHour";
    public static final String WEATHERDATA_PREDICTEDTEMPERATURE="PredictedTemperature";
    public static final String WEATHERDATA_PREDICTEDDATE="PredictedDate";
    public static final String WEATHERDATA_PREDICTEDWINDSPEED="PredictedWindSpeed";
    public static final String WEATHERDATA_PREDICTEDWEATHERCONDITION="PredictedWeatherCondition";
    public static final String WEATHERDATA="WeatherData";
    public static final String STATICCOMPONENTPROPERTIES="StaticComponentProperties";
    public static final String TRIPHASECABLESTATE_PHASE2="phase2";
    public static final String TRIPHASECABLESTATE_PHASE1="phase1";
    public static final String TRIPHASECABLESTATE_PHASE3="phase3";
    public static final String TRIPHASECABLESTATE="TriPhaseCableState";
    public static final String UNIPHASEELECTRICALNODESTATE_COSPHI="cosPhi";
    public static final String UNIPHASEELECTRICALNODESTATE_CURRENT="current";
    public static final String UNIPHASEELECTRICALNODESTATE_VOLTAGEREAL="voltageReal";
    public static final String UNIPHASEELECTRICALNODESTATE_P="P";
    public static final String UNIPHASEELECTRICALNODESTATE_VOLTAGEIMAG="voltageImag";
    public static final String UNIPHASEELECTRICALNODESTATE_S="S";
    public static final String UNIPHASEELECTRICALNODESTATE_VOLTAGEABS="voltageAbs";
    public static final String UNIPHASEELECTRICALNODESTATE_Q="Q";
    public static final String UNIPHASEELECTRICALNODESTATE="UniPhaseElectricalNodeState";
    public static final String TWINHEATNODESTATE_AMBIENTTEMPERATURE="ambientTemperature";
    public static final String TWINHEATNODESTATE_THERMALLOAD="thermalLoad";
    public static final String TWINHEATNODESTATE_SUPPLYNODESTATE="supplyNodeState";
    public static final String TWINHEATNODESTATE_RETURNNODESTATE="returnNodeState";
    public static final String TWINHEATNODESTATE="TwinHeatNodeState";
    public static final String AMBERTRAFFICLIGHT="AmberTrafficLight";
    public static final String EDGECOMPONENTPROPERTIES="EdgeComponentProperties";
    public static final String PIPESURROUNDING_SURROUNDINGTEMPERATURE="surroundingTemperature";
    public static final String PIPESURROUNDING_SURROUNDINGTHERMALCONDUCTIVITY="surroundingThermalConductivity";
    public static final String PIPESURROUNDING="PipeSurrounding";
    public static final String CABLEPROPERTIES_MAXCURRENT="maxCurrent";
    public static final String CABLEPROPERTIES_LENGTH="length";
    public static final String CABLEPROPERTIES_LINEARRESISTANCE="linearResistance";
    public static final String CABLEPROPERTIES_LINEARREACTANCE="linearReactance";
    public static final String CABLEPROPERTIES_DIM="dim";
    public static final String CABLEPROPERTIES_LINEARCONDUCTANCE="linearConductance";
    public static final String CABLEPROPERTIES_DIN="din";
    public static final String CABLEPROPERTIES_LINEARCAPACITANCE="linearCapacitance";
    public static final String CABLEPROPERTIES="CableProperties";
    public static final String REDTRAFFICLIGHT="RedTrafficLight";
    public static final String SLACKNODESTATE="SlackNodeState";
    public static final String ACTIVEPOWER="ActivePower";
    public static final String ELECTRICALGRIDSTATE_LOCALNODENUM="LocalNodeNum";
    public static final String ELECTRICALGRIDSTATE_GRIDSTATEINFO="GridStateInfo";
    public static final String ELECTRICALGRIDSTATE_GLOBALNAME="GlobalName";
    public static final String ELECTRICALGRIDSTATE="ElectricalGridState";
    public static final String HEATPIPEPROPERTIES_COATINGTHERMALCONDUCTIVITY="coatingThermalConductivity";
    public static final String HEATPIPEPROPERTIES_SURROUNDING="surrounding";
    public static final String HEATPIPEPROPERTIES_ISOLATIONTHICKNESS="isolationThickness";
    public static final String HEATPIPEPROPERTIES_ISOLATIONTHERMALCONDUCTIVITY="isolationThermalConductivity";
    public static final String HEATPIPEPROPERTIES_COATINGTHICKNESS="coatingThickness";
    public static final String HEATPIPEPROPERTIES="HeatPipeProperties";
    public static final String PIPEPROPERTIES_LENGTH="length";
    public static final String PIPEPROPERTIES_DIAMETER="diameter";
    public static final String PIPEPROPERTIES_PIPETHICKNESS="pipeThickness";
    public static final String PIPEPROPERTIES_PIPETHERMALCONDUCTIVITY="pipeThermalConductivity";
    public static final String PIPEPROPERTIES_MANUFACTURER="manufacturer";
    public static final String PIPEPROPERTIES_ROUGHNESS="roughness";
    public static final String PIPEPROPERTIES_MINORLOSSCOEFFICIENT="minorLossCoefficient";
    public static final String PIPEPROPERTIES_MAKE="make";
    public static final String PIPEPROPERTIES_NOMINALSIZE="nominalSize";
    public static final String PIPEPROPERTIES="PipeProperties";
    public static final String TRIPHASEELECTRICALTRANSFORMERSTATE_RATEDVOLTAGE="ratedVoltage";
    public static final String TRIPHASEELECTRICALTRANSFORMERSTATE="TriPhaseElectricalTransformerState";

  /**
   * Constructor
  */
  private HyGridOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema triPhaseElectricalTransformerStateSchema = new ConceptSchema(TRIPHASEELECTRICALTRANSFORMERSTATE);
    add(triPhaseElectricalTransformerStateSchema, de.enflexit.ea.core.dataModel.ontology.TriPhaseElectricalTransformerState.class);
    ConceptSchema pipePropertiesSchema = new ConceptSchema(PIPEPROPERTIES);
    add(pipePropertiesSchema, de.enflexit.ea.core.dataModel.ontology.PipeProperties.class);
    ConceptSchema heatPipePropertiesSchema = new ConceptSchema(HEATPIPEPROPERTIES);
    add(heatPipePropertiesSchema, de.enflexit.ea.core.dataModel.ontology.HeatPipeProperties.class);
    ConceptSchema electricalGridStateSchema = new ConceptSchema(ELECTRICALGRIDSTATE);
    add(electricalGridStateSchema, de.enflexit.ea.core.dataModel.ontology.ElectricalGridState.class);
    ConceptSchema activePowerSchema = new ConceptSchema(ACTIVEPOWER);
    add(activePowerSchema, de.enflexit.ea.core.dataModel.ontology.ActivePower.class);
    ConceptSchema slackNodeStateSchema = new ConceptSchema(SLACKNODESTATE);
    add(slackNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.SlackNodeState.class);
    ConceptSchema redTrafficLightSchema = new ConceptSchema(REDTRAFFICLIGHT);
    add(redTrafficLightSchema, de.enflexit.ea.core.dataModel.ontology.RedTrafficLight.class);
    ConceptSchema cablePropertiesSchema = new ConceptSchema(CABLEPROPERTIES);
    add(cablePropertiesSchema, de.enflexit.ea.core.dataModel.ontology.CableProperties.class);
    ConceptSchema pipeSurroundingSchema = new ConceptSchema(PIPESURROUNDING);
    add(pipeSurroundingSchema, de.enflexit.ea.core.dataModel.ontology.PipeSurrounding.class);
    ConceptSchema edgeComponentPropertiesSchema = new ConceptSchema(EDGECOMPONENTPROPERTIES);
    add(edgeComponentPropertiesSchema, de.enflexit.ea.core.dataModel.ontology.EdgeComponentProperties.class);
    ConceptSchema amberTrafficLightSchema = new ConceptSchema(AMBERTRAFFICLIGHT);
    add(amberTrafficLightSchema, de.enflexit.ea.core.dataModel.ontology.AmberTrafficLight.class);
    ConceptSchema twinHeatNodeStateSchema = new ConceptSchema(TWINHEATNODESTATE);
    add(twinHeatNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.TwinHeatNodeState.class);
    ConceptSchema uniPhaseElectricalNodeStateSchema = new ConceptSchema(UNIPHASEELECTRICALNODESTATE);
    add(uniPhaseElectricalNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.UniPhaseElectricalNodeState.class);
    ConceptSchema triPhaseCableStateSchema = new ConceptSchema(TRIPHASECABLESTATE);
    add(triPhaseCableStateSchema, de.enflexit.ea.core.dataModel.ontology.TriPhaseCableState.class);
    ConceptSchema staticComponentPropertiesSchema = new ConceptSchema(STATICCOMPONENTPROPERTIES);
    add(staticComponentPropertiesSchema, de.enflexit.ea.core.dataModel.ontology.StaticComponentProperties.class);
    ConceptSchema weatherDataSchema = new ConceptSchema(WEATHERDATA);
    add(weatherDataSchema, de.enflexit.ea.core.dataModel.ontology.WeatherData.class);
    ConceptSchema voltageBandSchema = new ConceptSchema(VOLTAGEBAND);
    add(voltageBandSchema, de.enflexit.ea.core.dataModel.ontology.VoltageBand.class);
    ConceptSchema dynamicComponentStateSchema = new ConceptSchema(DYNAMICCOMPONENTSTATE);
    add(dynamicComponentStateSchema, de.enflexit.ea.core.dataModel.ontology.DynamicComponentState.class);
    ConceptSchema uniPhaseSlackNodeStateSchema = new ConceptSchema(UNIPHASESLACKNODESTATE);
    add(uniPhaseSlackNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.UniPhaseSlackNodeState.class);
    ConceptSchema nodeComponentStateSchema = new ConceptSchema(NODECOMPONENTSTATE);
    add(nodeComponentStateSchema, de.enflexit.ea.core.dataModel.ontology.NodeComponentState.class);
    ConceptSchema reactivePowerSchema = new ConceptSchema(REACTIVEPOWER);
    add(reactivePowerSchema, de.enflexit.ea.core.dataModel.ontology.ReactivePower.class);
    ConceptSchema powerSchema = new ConceptSchema(POWER);
    add(powerSchema, de.enflexit.ea.core.dataModel.ontology.Power.class);
    ConceptSchema greenTrafficLightSchema = new ConceptSchema(GREENTRAFFICLIGHT);
    add(greenTrafficLightSchema, de.enflexit.ea.core.dataModel.ontology.GreenTrafficLight.class);
    ConceptSchema edgeComponentStateSchema = new ConceptSchema(EDGECOMPONENTSTATE);
    add(edgeComponentStateSchema, de.enflexit.ea.core.dataModel.ontology.EdgeComponentState.class);
    ConceptSchema uniPhaseElectricalTransformerStateSchema = new ConceptSchema(UNIPHASEELECTRICALTRANSFORMERSTATE);
    add(uniPhaseElectricalTransformerStateSchema, de.enflexit.ea.core.dataModel.ontology.UniPhaseElectricalTransformerState.class);
    ConceptSchema uniPhaseCableWithBreakerSchema = new ConceptSchema(UNIPHASECABLEWITHBREAKER);
    add(uniPhaseCableWithBreakerSchema, de.enflexit.ea.core.dataModel.ontology.UniPhaseCableWithBreaker.class);
    ConceptSchema doubleValueSchema = new ConceptSchema(DOUBLEVALUE);
    add(doubleValueSchema, de.enflexit.ea.core.dataModel.ontology.DoubleValue.class);
    ConceptSchema electricalPowerSchema = new ConceptSchema(ELECTRICALPOWER);
    add(electricalPowerSchema, de.enflexit.ea.core.dataModel.ontology.ElectricalPower.class);
    ConceptSchema modbusSetpointSchema = new ConceptSchema(MODBUSSETPOINT);
    add(modbusSetpointSchema, de.enflexit.ea.core.dataModel.ontology.ModbusSetpoint.class);
    ConceptSchema trafficLightSchema = new ConceptSchema(TRAFFICLIGHT);
    add(trafficLightSchema, de.enflexit.ea.core.dataModel.ontology.TrafficLight.class);
    ConceptSchema twinPipeStateSchema = new ConceptSchema(TWINPIPESTATE);
    add(twinPipeStateSchema, de.enflexit.ea.core.dataModel.ontology.TwinPipeState.class);
    ConceptSchema circuitBreakerSchema = new ConceptSchema(CIRCUITBREAKER);
    add(circuitBreakerSchema, de.enflexit.ea.core.dataModel.ontology.CircuitBreaker.class);
    ConceptSchema cableStateSchema = new ConceptSchema(CABLESTATE);
    add(cableStateSchema, de.enflexit.ea.core.dataModel.ontology.CableState.class);
    ConceptSchema heatNodePropertiesSchema = new ConceptSchema(HEATNODEPROPERTIES);
    add(heatNodePropertiesSchema, de.enflexit.ea.core.dataModel.ontology.HeatNodeProperties.class);
    ConceptSchema pipeStateSchema = new ConceptSchema(PIPESTATE);
    add(pipeStateSchema, de.enflexit.ea.core.dataModel.ontology.PipeState.class);
    ConceptSchema uniPhaseSensorStateSchema = new ConceptSchema(UNIPHASESENSORSTATE);
    add(uniPhaseSensorStateSchema, de.enflexit.ea.core.dataModel.ontology.UniPhaseSensorState.class);
    ConceptSchema heatPipeStateSchema = new ConceptSchema(HEATPIPESTATE);
    add(heatPipeStateSchema, de.enflexit.ea.core.dataModel.ontology.HeatPipeState.class);
    ConceptSchema nodeComponentPropertiesSchema = new ConceptSchema(NODECOMPONENTPROPERTIES);
    add(nodeComponentPropertiesSchema, de.enflexit.ea.core.dataModel.ontology.NodeComponentProperties.class);
    ConceptSchema electricalNodeStateSchema = new ConceptSchema(ELECTRICALNODESTATE);
    add(electricalNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.ElectricalNodeState.class);
    ConceptSchema pipeSurroundingEarthSchema = new ConceptSchema(PIPESURROUNDINGEARTH);
    add(pipeSurroundingEarthSchema, de.enflexit.ea.core.dataModel.ontology.PipeSurroundingEarth.class);
    ConceptSchema cableWithBreakerPropertiesSchema = new ConceptSchema(CABLEWITHBREAKERPROPERTIES);
    add(cableWithBreakerPropertiesSchema, de.enflexit.ea.core.dataModel.ontology.CableWithBreakerProperties.class);
    ConceptSchema electricalNodePropertiesSchema = new ConceptSchema(ELECTRICALNODEPROPERTIES);
    add(electricalNodePropertiesSchema, de.enflexit.ea.core.dataModel.ontology.ElectricalNodeProperties.class);
    ConceptSchema pipeSurroundingAirSchema = new ConceptSchema(PIPESURROUNDINGAIR);
    add(pipeSurroundingAirSchema, de.enflexit.ea.core.dataModel.ontology.PipeSurroundingAir.class);
    ConceptSchema fluidNodeStateSchema = new ConceptSchema(FLUIDNODESTATE);
    add(fluidNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.FluidNodeState.class);
    ConceptSchema triPhaseSlackNodeStateSchema = new ConceptSchema(TRIPHASESLACKNODESTATE);
    add(triPhaseSlackNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.TriPhaseSlackNodeState.class);
    ConceptSchema heatNodeStateSchema = new ConceptSchema(HEATNODESTATE);
    add(heatNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.HeatNodeState.class);
    ConceptSchema triPhaseElectricalNodeStateSchema = new ConceptSchema(TRIPHASEELECTRICALNODESTATE);
    add(triPhaseElectricalNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.TriPhaseElectricalNodeState.class);
    ConceptSchema uniPhaseCableStateSchema = new ConceptSchema(UNIPHASECABLESTATE);
    add(uniPhaseCableStateSchema, de.enflexit.ea.core.dataModel.ontology.UniPhaseCableState.class);
    ConceptSchema triPhaseSensorStateSchema = new ConceptSchema(TRIPHASESENSORSTATE);
    add(triPhaseSensorStateSchema, de.enflexit.ea.core.dataModel.ontology.TriPhaseSensorState.class);
    ConceptSchema longValueSchema = new ConceptSchema(LONGVALUE);
    add(longValueSchema, de.enflexit.ea.core.dataModel.ontology.LongValue.class);
    ConceptSchema gridStateAssessmentSchema = new ConceptSchema(GRIDSTATEASSESSMENT);
    add(gridStateAssessmentSchema, de.enflexit.ea.core.dataModel.ontology.GridStateAssessment.class);
    ConceptSchema gasNodeStateSchema = new ConceptSchema(GASNODESTATE);
    add(gasNodeStateSchema, de.enflexit.ea.core.dataModel.ontology.GasNodeState.class);
    ConceptSchema unitValueSchema = new ConceptSchema(UNITVALUE);
    add(unitValueSchema, de.enflexit.ea.core.dataModel.ontology.UnitValue.class);
    ConceptSchema remoteAgentInformationSchema = new ConceptSchema(REMOTEAGENTINFORMATION);
    add(remoteAgentInformationSchema, de.enflexit.ea.core.dataModel.ontology.RemoteAgentInformation.class);
    ConceptSchema sensorPropertiesSchema = new ConceptSchema(SENSORPROPERTIES);
    add(sensorPropertiesSchema, de.enflexit.ea.core.dataModel.ontology.SensorProperties.class);
    ConceptSchema transformerNodePropertiesSchema = new ConceptSchema(TRANSFORMERNODEPROPERTIES);
    add(transformerNodePropertiesSchema, de.enflexit.ea.core.dataModel.ontology.TransformerNodeProperties.class);

    // adding AgentAction(s)
    AgentActionSchema proxyAgentRegistrationRequestSchema = new AgentActionSchema(PROXYAGENTREGISTRATIONREQUEST);
    add(proxyAgentRegistrationRequestSchema, de.enflexit.ea.core.dataModel.ontology.ProxyAgentRegistrationRequest.class);
    AgentActionSchema voltageBandInformationSchema = new AgentActionSchema(VOLTAGEBANDINFORMATION);
    add(voltageBandInformationSchema, de.enflexit.ea.core.dataModel.ontology.VoltageBandInformation.class);
    AgentActionSchema referencePVMeasurementUpdateSchema = new AgentActionSchema(REFERENCEPVMEASUREMENTUPDATE);
    add(referencePVMeasurementUpdateSchema, de.enflexit.ea.core.dataModel.ontology.ReferencePVMeasurementUpdate.class);
    AgentActionSchema modbusAdapterActionSchema = new AgentActionSchema(MODBUSADAPTERACTION);
    add(modbusAdapterActionSchema, de.enflexit.ea.core.dataModel.ontology.ModbusAdapterAction.class);
    AgentActionSchema gasMeasurementSchema = new AgentActionSchema(GASMEASUREMENT);
    add(gasMeasurementSchema, de.enflexit.ea.core.dataModel.ontology.GasMeasurement.class);
    AgentActionSchema measurementSchema = new AgentActionSchema(MEASUREMENT);
    add(measurementSchema, de.enflexit.ea.core.dataModel.ontology.Measurement.class);
    AgentActionSchema weatherDataUpdateSchema = new AgentActionSchema(WEATHERDATAUPDATE);
    add(weatherDataUpdateSchema, de.enflexit.ea.core.dataModel.ontology.WeatherDataUpdate.class);
    AgentActionSchema electricalMeasurementSchema = new AgentActionSchema(ELECTRICALMEASUREMENT);
    add(electricalMeasurementSchema, de.enflexit.ea.core.dataModel.ontology.ElectricalMeasurement.class);
    AgentActionSchema energyAgentControlSchema = new AgentActionSchema(ENERGYAGENTCONTROL);
    add(energyAgentControlSchema, de.enflexit.ea.core.dataModel.ontology.EnergyAgentControl.class);
    AgentActionSchema setModbusSetpointsSchema = new AgentActionSchema(SETMODBUSSETPOINTS);
    add(setModbusSetpointsSchema, de.enflexit.ea.core.dataModel.ontology.SetModbusSetpoints.class);
    AgentActionSchema ceaRegistrationResponseSchema = new AgentActionSchema(CEAREGISTRATIONRESPONSE);
    add(ceaRegistrationResponseSchema, de.enflexit.ea.core.dataModel.ontology.CEARegistrationResponse.class);
    AgentActionSchema requestValuesSchema = new AgentActionSchema(REQUESTVALUES);
    add(requestValuesSchema, de.enflexit.ea.core.dataModel.ontology.RequestValues.class);
    AgentActionSchema gridStateControlSchema = new AgentActionSchema(GRIDSTATECONTROL);
    add(gridStateControlSchema, de.enflexit.ea.core.dataModel.ontology.GridStateControl.class);
    AgentActionSchema electricalGridStateUpdateSchema = new AgentActionSchema(ELECTRICALGRIDSTATEUPDATE);
    add(electricalGridStateUpdateSchema, de.enflexit.ea.core.dataModel.ontology.ElectricalGridStateUpdate.class);
    AgentActionSchema showUiActionSchema = new AgentActionSchema(SHOWUIACTION);
    add(showUiActionSchema, de.enflexit.ea.core.dataModel.ontology.ShowUiAction.class);
    AgentActionSchema testbedAgentManagementSchema = new AgentActionSchema(TESTBEDAGENTMANAGEMENT);
    add(testbedAgentManagementSchema, de.enflexit.ea.core.dataModel.ontology.TestbedAgentManagement.class);
    AgentActionSchema flexibilityOfferSchema = new AgentActionSchema(FLEXIBILITYOFFER);
    add(flexibilityOfferSchema, de.enflexit.ea.core.dataModel.ontology.FlexibilityOffer.class);
    AgentActionSchema remoteAgentRegistrationRequestSchema = new AgentActionSchema(REMOTEAGENTREGISTRATIONREQUEST);
    add(remoteAgentRegistrationRequestSchema, de.enflexit.ea.core.dataModel.ontology.RemoteAgentRegistrationRequest.class);
    AgentActionSchema networkStateInformationSchema = new AgentActionSchema(NETWORKSTATEINFORMATION);
    add(networkStateInformationSchema, de.enflexit.ea.core.dataModel.ontology.NetworkStateInformation.class);
    AgentActionSchema gridStateViolationSchema = new AgentActionSchema(GRIDSTATEVIOLATION);
    add(gridStateViolationSchema, de.enflexit.ea.core.dataModel.ontology.GridStateViolation.class);
    AgentActionSchema gridStateAgentManagementSchema = new AgentActionSchema(GRIDSTATEAGENTMANAGEMENT);
    add(gridStateAgentManagementSchema, de.enflexit.ea.core.dataModel.ontology.GridStateAgentManagement.class);
    AgentActionSchema gridStateAssessmentInformationSchema = new AgentActionSchema(GRIDSTATEASSESSMENTINFORMATION);
    add(gridStateAssessmentInformationSchema, de.enflexit.ea.core.dataModel.ontology.GridStateAssessmentInformation.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    triPhaseElectricalTransformerStateSchema.add(TRIPHASEELECTRICALTRANSFORMERSTATE_RATEDVOLTAGE, unitValueSchema, ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_NOMINALSIZE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_MAKE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_MINORLOSSCOEFFICIENT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_ROUGHNESS, unitValueSchema, ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_MANUFACTURER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_PIPETHERMALCONDUCTIVITY, unitValueSchema, ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_PIPETHICKNESS, unitValueSchema, ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_DIAMETER, unitValueSchema, ObjectSchema.OPTIONAL);
    pipePropertiesSchema.add(PIPEPROPERTIES_LENGTH, unitValueSchema, ObjectSchema.OPTIONAL);
    heatPipePropertiesSchema.add(HEATPIPEPROPERTIES_COATINGTHICKNESS, unitValueSchema, ObjectSchema.OPTIONAL);
    heatPipePropertiesSchema.add(HEATPIPEPROPERTIES_ISOLATIONTHERMALCONDUCTIVITY, unitValueSchema, ObjectSchema.OPTIONAL);
    heatPipePropertiesSchema.add(HEATPIPEPROPERTIES_ISOLATIONTHICKNESS, unitValueSchema, ObjectSchema.OPTIONAL);
    heatPipePropertiesSchema.add(HEATPIPEPROPERTIES_SURROUNDING, pipeSurroundingSchema, ObjectSchema.OPTIONAL);
    heatPipePropertiesSchema.add(HEATPIPEPROPERTIES_COATINGTHERMALCONDUCTIVITY, unitValueSchema, ObjectSchema.OPTIONAL);
    electricalGridStateSchema.add(ELECTRICALGRIDSTATE_GLOBALNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    electricalGridStateSchema.add(ELECTRICALGRIDSTATE_GRIDSTATEINFO, electricalNodeStateSchema, ObjectSchema.OPTIONAL);
    electricalGridStateSchema.add(ELECTRICALGRIDSTATE_LOCALNODENUM, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    cablePropertiesSchema.add(CABLEPROPERTIES_LINEARCAPACITANCE, unitValueSchema, ObjectSchema.OPTIONAL);
    cablePropertiesSchema.add(CABLEPROPERTIES_DIN, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    cablePropertiesSchema.add(CABLEPROPERTIES_LINEARCONDUCTANCE, unitValueSchema, ObjectSchema.OPTIONAL);
    cablePropertiesSchema.add(CABLEPROPERTIES_DIM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    cablePropertiesSchema.add(CABLEPROPERTIES_LINEARREACTANCE, unitValueSchema, ObjectSchema.OPTIONAL);
    cablePropertiesSchema.add(CABLEPROPERTIES_LINEARRESISTANCE, unitValueSchema, ObjectSchema.OPTIONAL);
    cablePropertiesSchema.add(CABLEPROPERTIES_LENGTH, unitValueSchema, ObjectSchema.OPTIONAL);
    cablePropertiesSchema.add(CABLEPROPERTIES_MAXCURRENT, unitValueSchema, ObjectSchema.OPTIONAL);
    pipeSurroundingSchema.add(PIPESURROUNDING_SURROUNDINGTHERMALCONDUCTIVITY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    pipeSurroundingSchema.add(PIPESURROUNDING_SURROUNDINGTEMPERATURE, unitValueSchema, ObjectSchema.OPTIONAL);
    twinHeatNodeStateSchema.add(TWINHEATNODESTATE_RETURNNODESTATE, heatNodeStateSchema, ObjectSchema.OPTIONAL);
    twinHeatNodeStateSchema.add(TWINHEATNODESTATE_SUPPLYNODESTATE, heatNodeStateSchema, ObjectSchema.OPTIONAL);
    twinHeatNodeStateSchema.add(TWINHEATNODESTATE_THERMALLOAD, unitValueSchema, ObjectSchema.OPTIONAL);
    twinHeatNodeStateSchema.add(TWINHEATNODESTATE_AMBIENTTEMPERATURE, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalNodeStateSchema.add(UNIPHASEELECTRICALNODESTATE_Q, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalNodeStateSchema.add(UNIPHASEELECTRICALNODESTATE_VOLTAGEABS, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalNodeStateSchema.add(UNIPHASEELECTRICALNODESTATE_S, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalNodeStateSchema.add(UNIPHASEELECTRICALNODESTATE_VOLTAGEIMAG, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalNodeStateSchema.add(UNIPHASEELECTRICALNODESTATE_P, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalNodeStateSchema.add(UNIPHASEELECTRICALNODESTATE_VOLTAGEREAL, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalNodeStateSchema.add(UNIPHASEELECTRICALNODESTATE_CURRENT, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalNodeStateSchema.add(UNIPHASEELECTRICALNODESTATE_COSPHI, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    triPhaseCableStateSchema.add(TRIPHASECABLESTATE_PHASE3, uniPhaseCableStateSchema, ObjectSchema.OPTIONAL);
    triPhaseCableStateSchema.add(TRIPHASECABLESTATE_PHASE1, uniPhaseCableStateSchema, ObjectSchema.OPTIONAL);
    triPhaseCableStateSchema.add(TRIPHASECABLESTATE_PHASE2, uniPhaseCableStateSchema, ObjectSchema.OPTIONAL);
    weatherDataSchema.add(WEATHERDATA_PREDICTEDWEATHERCONDITION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    weatherDataSchema.add(WEATHERDATA_PREDICTEDWINDSPEED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    weatherDataSchema.add(WEATHERDATA_PREDICTEDDATE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    weatherDataSchema.add(WEATHERDATA_PREDICTEDTEMPERATURE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    weatherDataSchema.add(WEATHERDATA_PREDICTEDHOUR, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    voltageBandSchema.add(VOLTAGEBAND_VOLTAGEAVG, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    voltageBandSchema.add(VOLTAGEBAND_VOLTAGEMAX, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    voltageBandSchema.add(VOLTAGEBAND_VOLTAGEMIN, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    uniPhaseSlackNodeStateSchema.add(UNIPHASESLACKNODESTATE_VOLTAGEIMAG, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseSlackNodeStateSchema.add(UNIPHASESLACKNODESTATE_VOLTAGEREAL, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseElectricalTransformerStateSchema.add(UNIPHASEELECTRICALTRANSFORMERSTATE_RATEDVOLTAGE, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableWithBreakerSchema.add(UNIPHASECABLEWITHBREAKER_BREAKEREND, circuitBreakerSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableWithBreakerSchema.add(UNIPHASECABLEWITHBREAKER_BREAKERBEGIN, circuitBreakerSchema, ObjectSchema.OPTIONAL);
    doubleValueSchema.add(DOUBLEVALUE_STRINGDOUBLEVALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    electricalPowerSchema.add(ELECTRICALPOWER_VOLTAGEABS, unitValueSchema, ObjectSchema.OPTIONAL);
    electricalPowerSchema.add(ELECTRICALPOWER_CURRENT, unitValueSchema, ObjectSchema.OPTIONAL);
    modbusSetpointSchema.add(MODBUSSETPOINT_SETPOINTVALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    modbusSetpointSchema.add(MODBUSSETPOINT_REGISTERINDEX, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    twinPipeStateSchema.add(TWINPIPESTATE_SUPPLYPIPESTATE, heatPipeStateSchema, ObjectSchema.OPTIONAL);
    twinPipeStateSchema.add(TWINPIPESTATE_RETURNPIPESTATE, heatPipeStateSchema, ObjectSchema.OPTIONAL);
    circuitBreakerSchema.add(CIRCUITBREAKER_BREAKERID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    circuitBreakerSchema.add(CIRCUITBREAKER_ATCOMPONENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    circuitBreakerSchema.add(CIRCUITBREAKER_ISCONTROLLABLE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    circuitBreakerSchema.add(CIRCUITBREAKER_ISCLOSED, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    heatNodePropertiesSchema.add(HEATNODEPROPERTIES_NOMINALPOWER, unitValueSchema, ObjectSchema.OPTIONAL);
    heatNodePropertiesSchema.add(HEATNODEPROPERTIES_ISLOADNODE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    pipeStateSchema.add(PIPESTATE_VELOCITYOUT, unitValueSchema, ObjectSchema.OPTIONAL);
    pipeStateSchema.add(PIPESTATE_PRESSUREOUT, unitValueSchema, ObjectSchema.OPTIONAL);
    pipeStateSchema.add(PIPESTATE_TEMPERATUREOUT, unitValueSchema, ObjectSchema.OPTIONAL);
    pipeStateSchema.add(PIPESTATE_VELOCITYIN, unitValueSchema, ObjectSchema.OPTIONAL);
    pipeStateSchema.add(PIPESTATE_PRESSUREIN, unitValueSchema, ObjectSchema.OPTIONAL);
    pipeStateSchema.add(PIPESTATE_TEMPERATUREIN, unitValueSchema, ObjectSchema.OPTIONAL);
    pipeStateSchema.add(PIPESTATE_SURROUNDINGTEMPERATURE, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseSensorStateSchema.add(UNIPHASESENSORSTATE_MEASUREDVOLTAGE, unitValueSchema, ObjectSchema.OPTIONAL);
    heatPipeStateSchema.add(HEATPIPESTATE_ENERGYLOSS, unitValueSchema, ObjectSchema.OPTIONAL);
    heatPipeStateSchema.add(HEATPIPESTATE_DELTAPRESSURE, unitValueSchema, ObjectSchema.OPTIONAL);
    heatPipeStateSchema.add(HEATPIPESTATE_DELTATEMPERATURE, unitValueSchema, ObjectSchema.OPTIONAL);
    nodeComponentPropertiesSchema.add(NODECOMPONENTPROPERTIES_DESCRIPTION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    pipeSurroundingEarthSchema.add(PIPESURROUNDINGEARTH_DEPTHSINMETERS, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    cableWithBreakerPropertiesSchema.add(CABLEWITHBREAKERPROPERTIES_BREAKEREND, circuitBreakerSchema, ObjectSchema.OPTIONAL);
    cableWithBreakerPropertiesSchema.add(CABLEWITHBREAKERPROPERTIES_BREAKERBEGIN, circuitBreakerSchema, ObjectSchema.OPTIONAL);
    electricalNodePropertiesSchema.add(ELECTRICALNODEPROPERTIES_NOMINALPOWER, unitValueSchema, ObjectSchema.OPTIONAL);
    electricalNodePropertiesSchema.add(ELECTRICALNODEPROPERTIES_ISLOADNODE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    fluidNodeStateSchema.add(FLUIDNODESTATE_TEMPERATURE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    fluidNodeStateSchema.add(FLUIDNODESTATE_PRESSURE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    triPhaseSlackNodeStateSchema.add(TRIPHASESLACKNODESTATE_SLACKNODESTATEL1, uniPhaseSlackNodeStateSchema, ObjectSchema.OPTIONAL);
    triPhaseSlackNodeStateSchema.add(TRIPHASESLACKNODESTATE_SLACKNODESTATEL2, uniPhaseSlackNodeStateSchema, ObjectSchema.OPTIONAL);
    triPhaseSlackNodeStateSchema.add(TRIPHASESLACKNODESTATE_SLACKNODESTATEL3, uniPhaseSlackNodeStateSchema, ObjectSchema.OPTIONAL);
    heatNodeStateSchema.add(HEATNODESTATE_TEMPERATURESETPOINT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    triPhaseElectricalNodeStateSchema.add(TRIPHASEELECTRICALNODESTATE_L3, uniPhaseElectricalNodeStateSchema, ObjectSchema.OPTIONAL);
    triPhaseElectricalNodeStateSchema.add(TRIPHASEELECTRICALNODESTATE_L2, uniPhaseElectricalNodeStateSchema, ObjectSchema.OPTIONAL);
    triPhaseElectricalNodeStateSchema.add(TRIPHASEELECTRICALNODESTATE_L1, uniPhaseElectricalNodeStateSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_Q, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_UTILIZATION, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_LOSSESP, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_LOSSESQ, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_P, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_CURRENTIMAG, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_CURRENTREAL, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_CURRENT, unitValueSchema, ObjectSchema.OPTIONAL);
    uniPhaseCableStateSchema.add(UNIPHASECABLESTATE_COSPHI, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    triPhaseSensorStateSchema.add(TRIPHASESENSORSTATE_MEASUREDVOLTAGEL1, unitValueSchema, ObjectSchema.OPTIONAL);
    triPhaseSensorStateSchema.add(TRIPHASESENSORSTATE_MEASUREDVOLTAGEL2, unitValueSchema, ObjectSchema.OPTIONAL);
    triPhaseSensorStateSchema.add(TRIPHASESENSORSTATE_MEASUREDVOLTAGEL3, unitValueSchema, ObjectSchema.OPTIONAL);
    longValueSchema.add(LONGVALUE_STRINGLONGVALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gridStateAssessmentSchema.add(GRIDSTATEASSESSMENT_VOLTAGETRAFFICLIGHT, trafficLightSchema, ObjectSchema.OPTIONAL);
    gridStateAssessmentSchema.add(GRIDSTATEASSESSMENT_UTILIZATIONTRAFFICLIGHT, trafficLightSchema, ObjectSchema.OPTIONAL);
    gasNodeStateSchema.add(GASNODESTATE_VOLUMEFLOW, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    unitValueSchema.add(UNITVALUE_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    unitValueSchema.add(UNITVALUE_UNIT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    remoteAgentInformationSchema.add(REMOTEAGENTINFORMATION_PROXYAGENTAID, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    remoteAgentInformationSchema.add(REMOTEAGENTINFORMATION_REMOTEAGENTAID, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    sensorPropertiesSchema.add(SENSORPROPERTIES_MEASURELOCATION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    sensorPropertiesSchema.add(SENSORPROPERTIES_SENSORID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    transformerNodePropertiesSchema.add(TRANSFORMERNODEPROPERTIES_RATEDVOLTAGE, unitValueSchema, ObjectSchema.OPTIONAL);
    voltageBandInformationSchema.add(VOLTAGEBANDINFORMATION_VOLTAGEBAND, voltageBandSchema, ObjectSchema.OPTIONAL);
    referencePVMeasurementUpdateSchema.add(REFERENCEPVMEASUREMENTUPDATE_TIMESTAMPREFPV, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    referencePVMeasurementUpdateSchema.add(REFERENCEPVMEASUREMENTUPDATE_RELATIVEPOWER, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gasMeasurementSchema.add(GASMEASUREMENT_GASNODESTATE, gasNodeStateSchema, ObjectSchema.OPTIONAL);
    weatherDataUpdateSchema.add(WEATHERDATAUPDATE_PREDICTEDWEATHERDATA, weatherDataSchema, 0, ObjectSchema.UNLIMITED);
    weatherDataUpdateSchema.add(WEATHERDATAUPDATE_TIMESTAMPWEATHER, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    electricalMeasurementSchema.add(ELECTRICALMEASUREMENT_ELECTRICALNODESTATE, triPhaseElectricalNodeStateSchema, ObjectSchema.OPTIONAL);
    setModbusSetpointsSchema.add(SETMODBUSSETPOINTS_SETPOINTS, modbusSetpointSchema, 1, ObjectSchema.UNLIMITED);
    ceaRegistrationResponseSchema.add(CEAREGISTRATIONRESPONSE_COUNTERPARTAID, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    electricalGridStateUpdateSchema.add(ELECTRICALGRIDSTATEUPDATE_GRIDSTATE, electricalGridStateSchema, 0, ObjectSchema.UNLIMITED);
    electricalGridStateUpdateSchema.add(ELECTRICALGRIDSTATEUPDATE_TIMESTAMPGRIDSTATE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    flexibilityOfferSchema.add(FLEXIBILITYOFFER_POSSIBLEPOWERREAL, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flexibilityOfferSchema.add(FLEXIBILITYOFFER_POSSIBLECURRENTADJUSTMENT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flexibilityOfferSchema.add(FLEXIBILITYOFFER_ACTUATORNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    flexibilityOfferSchema.add(FLEXIBILITYOFFER_POSSIBLEVOLTAGEADJUSTMENT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flexibilityOfferSchema.add(FLEXIBILITYOFFER_POSSIBLEPOWERIMAG, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flexibilityOfferSchema.add(FLEXIBILITYOFFER_PRIORITY, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    remoteAgentRegistrationRequestSchema.add(REMOTEAGENTREGISTRATIONREQUEST_CERTIFICATEBASE64, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    networkStateInformationSchema.add(NETWORKSTATEINFORMATION_TIMESTAMP, longValueSchema, ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_COMPONENTOFVIOLATION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_REQUIREDPOWERIMAG, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_REQUIREDPOWERREAL, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_CHOSENFLEXIBILITYREAL, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_KINDOFVIOLATION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_ACTUALNODALVOLTAGE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_ACTUALBRANCHCURRENT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_NPHASEOFVIOLATION, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_CABLEOVERLOADINPERCENT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_REQUIREDCURRENTADJUSTMENT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_CABLE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_REQUIREDVOLTAGEADJUSTMENT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_ACTUATORNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_POSSIBLEFLEXIBILITYOFFERS, flexibilityOfferSchema, 0, ObjectSchema.UNLIMITED);
    gridStateViolationSchema.add(GRIDSTATEVIOLATION_CHOSENFLEXIBILITYIMAG, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridStateAssessmentInformationSchema.add(GRIDSTATEASSESSMENTINFORMATION_GRIDSTATEASSESSMENT, gridStateAssessmentSchema, ObjectSchema.OPTIONAL);
    gridStateAssessmentInformationSchema.add(GRIDSTATEASSESSMENTINFORMATION_VOLTAGERANGE, voltageBandSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance
    triPhaseElectricalTransformerStateSchema.addSuperSchema(triPhaseElectricalNodeStateSchema);
    pipePropertiesSchema.addSuperSchema(edgeComponentPropertiesSchema);
    heatPipePropertiesSchema.addSuperSchema(pipePropertiesSchema);
    electricalGridStateSchema.addSuperSchema(nodeComponentStateSchema);
    activePowerSchema.addSuperSchema(electricalPowerSchema);
    slackNodeStateSchema.addSuperSchema(electricalNodeStateSchema);
    redTrafficLightSchema.addSuperSchema(trafficLightSchema);
    cablePropertiesSchema.addSuperSchema(edgeComponentPropertiesSchema);
    edgeComponentPropertiesSchema.addSuperSchema(staticComponentPropertiesSchema);
    amberTrafficLightSchema.addSuperSchema(trafficLightSchema);
    twinHeatNodeStateSchema.addSuperSchema(nodeComponentStateSchema);
    uniPhaseElectricalNodeStateSchema.addSuperSchema(electricalNodeStateSchema);
    triPhaseCableStateSchema.addSuperSchema(cableStateSchema);
    uniPhaseSlackNodeStateSchema.addSuperSchema(slackNodeStateSchema);
    nodeComponentStateSchema.addSuperSchema(dynamicComponentStateSchema);
    reactivePowerSchema.addSuperSchema(electricalPowerSchema);
    greenTrafficLightSchema.addSuperSchema(trafficLightSchema);
    edgeComponentStateSchema.addSuperSchema(dynamicComponentStateSchema);
    uniPhaseElectricalTransformerStateSchema.addSuperSchema(uniPhaseElectricalNodeStateSchema);
    uniPhaseCableWithBreakerSchema.addSuperSchema(uniPhaseCableStateSchema);
    electricalPowerSchema.addSuperSchema(powerSchema);
    twinPipeStateSchema.addSuperSchema(edgeComponentStateSchema);
    cableStateSchema.addSuperSchema(edgeComponentStateSchema);
    heatNodePropertiesSchema.addSuperSchema(nodeComponentPropertiesSchema);
    pipeStateSchema.addSuperSchema(edgeComponentStateSchema);
    uniPhaseSensorStateSchema.addSuperSchema(uniPhaseCableStateSchema);
    heatPipeStateSchema.addSuperSchema(pipeStateSchema);
    nodeComponentPropertiesSchema.addSuperSchema(staticComponentPropertiesSchema);
    electricalNodeStateSchema.addSuperSchema(nodeComponentStateSchema);
    pipeSurroundingEarthSchema.addSuperSchema(pipeSurroundingSchema);
    cableWithBreakerPropertiesSchema.addSuperSchema(cablePropertiesSchema);
    electricalNodePropertiesSchema.addSuperSchema(nodeComponentPropertiesSchema);
    pipeSurroundingAirSchema.addSuperSchema(pipeSurroundingSchema);
    fluidNodeStateSchema.addSuperSchema(nodeComponentStateSchema);
    triPhaseSlackNodeStateSchema.addSuperSchema(slackNodeStateSchema);
    heatNodeStateSchema.addSuperSchema(fluidNodeStateSchema);
    triPhaseElectricalNodeStateSchema.addSuperSchema(electricalNodeStateSchema);
    uniPhaseCableStateSchema.addSuperSchema(cableStateSchema);
    triPhaseSensorStateSchema.addSuperSchema(triPhaseCableStateSchema);
    gasNodeStateSchema.addSuperSchema(fluidNodeStateSchema);
    sensorPropertiesSchema.addSuperSchema(cablePropertiesSchema);
    transformerNodePropertiesSchema.addSuperSchema(electricalNodePropertiesSchema);
    proxyAgentRegistrationRequestSchema.addSuperSchema(testbedAgentManagementSchema);
    voltageBandInformationSchema.addSuperSchema(networkStateInformationSchema);
    referencePVMeasurementUpdateSchema.addSuperSchema(gridStateAgentManagementSchema);
    gasMeasurementSchema.addSuperSchema(measurementSchema);
    measurementSchema.addSuperSchema(networkStateInformationSchema);
    weatherDataUpdateSchema.addSuperSchema(gridStateAgentManagementSchema);
    electricalMeasurementSchema.addSuperSchema(measurementSchema);
    setModbusSetpointsSchema.addSuperSchema(modbusAdapterActionSchema);
    ceaRegistrationResponseSchema.addSuperSchema(testbedAgentManagementSchema);
    requestValuesSchema.addSuperSchema(modbusAdapterActionSchema);
    electricalGridStateUpdateSchema.addSuperSchema(gridStateAgentManagementSchema);
    showUiActionSchema.addSuperSchema(energyAgentControlSchema);
    flexibilityOfferSchema.addSuperSchema(gridStateControlSchema);
    remoteAgentRegistrationRequestSchema.addSuperSchema(testbedAgentManagementSchema);
    gridStateViolationSchema.addSuperSchema(gridStateControlSchema);
    gridStateAssessmentInformationSchema.addSuperSchema(networkStateInformationSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
